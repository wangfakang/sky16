{"name":"Sky16","tagline":"nginx dynamic mange upstream","body":"nginx动态upstream管理方案:\r\n\r\n\r\n目录\r\n====\r\n* [一.解决方案](#解决方案)  \r\n* [二.项目背景](#项目背景)      \r\n* [三.解决的问题](#解决的问题)   \r\n* [四.使用方法](#使用方法)   \r\n* [五.响应字段含义](#响应字段含义)     \r\n* [六.使用注意](#使用注意)\r\n\r\n解决方案\r\n====   \r\n1.使用我们组内在agentzh的ngx_lua_upstream_module基础上开发的[lua_upstream_module](https://github.com/SinaMSRE/lua-upstream-nginx-module).      \r\n \r\n* 该方案目前已经可以和tengine的dyups结合使用,不仅可以粗粒度的动态修改upstream,\r\n还可以细粒度的管理指定的upstream中的server的修改下面会详细介绍该项目.      \r\n\r\n2.使用agentzh开发饿balancer_by_lua指令,该指令在前面[博客](http://wangfakang.github.io/sky9/)简单剖析过.     \r\n\r\n* 该模块比较灵活, 可以根据每请求粒度的定制化后端peer.不过需要自己实现相应饿负载均衡算法.    \r\n\r\n3.使用tengine的[dyups](https://github.com/yzprofile/ngx_http_dyups_module)模块.\r\n\r\n* 该模块只可以比较粗粒度的管理upstream,比如删除/增加整个upstream等.\r\n\r\n\r\n综合上述问题可以择优选择,下面介绍新浪二次开发的[lua_upstream_module](https://github.com/SinaMSRE/lua-upstream-nginx-module).   \r\n\r\n项目背景\r\n====\r\n  当nginx作为七层进行负载均衡的时候,由于扩容或者缩容的时候都得手工的在nginx的配置文件中upstream指令中去增加\r\n或者删除机器server,然后进行reload使得nginx重新加载新的配置文件.那么这样就会越到几个问题:   \r\n\r\n  * 1.由于人肉操作,难免会写错配置文件导致nginx无法reload等问题.\r\n  * 2.nginx的reload的时候会有一些性能以及丢请求的问题.   \r\n  \r\n[目录](#目录)\r\n\r\n解决的问题\r\n====\r\n  * 1.当给nginx的upstream增加server的时候不用reload nginx使其动态生效.\r\n  * 2.可以避免nginx在reload的时候丢失请求.\r\n  * 3.避免在nginx reload的时候占用大量内存[当nginx的worker个数比较多的时候].\r\n  * 4.可以和服务发现进行整合,避免人肉的去修改,使其趋于自动化.    \r\n  \r\n[目录](#目录)  \r\n\r\n使用方法\r\n====\r\n   提供下列REST HTTP接口,形如\"127.0.0.1:80/action=${opreation_name}&args=${operation_args}\":  \r\n   \r\n   * 1.给upstream中server增加一个server                 \r\n     `http://localhost:port/dyups_admin/?action=add_server&upstream=bar&ip=127.0.0.1&port=81&weight=2&maxfails=2&failtimeout=10`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 操作当前nginx那个upstream\r\n     * ip: 新增加server的ip\r\n     * port: 新增加server的port\r\n     * weight: 为新的server设置权值,注意(该参数是可选参数default 1)\r\n     * maxfails: 为新的server设置max_fails,注意(该参数是可选参数default 1)\r\n     * failtimeout: 为新的server设置fail_timeout,注意(该参数是可选参数default 10)\r\n     \r\n   * 2.给upstream中后端peer增加一个server             \r\n     `http://localhost:port/dyups_admin/?action=add_peer&upstream=bar&ip=127.0.0.1&port=81`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 操作当前nginx那个upstream\r\n     * ip: 新增加server的ip\r\n     * port: 新增加server的port\r\n\r\n   * 3.删除upstream中server的一个server            \r\n     `http://localhost:port/dyups_admin/?action=remove_server&upstream=bar&ip=127.0.0.1&port=81`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 操作当前nginx那个upstream\r\n     * ip: 新增加server的ip\r\n     * port: 新增加server的port\r\n\r\n\r\n   * 4.删除upstream中后端peer的一个server           \r\n     `http://localhost:port/dyups_admin/?action=remove_peer&upstream=bar&ip=127.0.0.1&port=81`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 操作当前nginx那个upstream\r\n     * ip: 新增加server的ip\r\n     * port: 新增加server的port\r\n\r\n\r\n   * 5.查看upstream中的servers信息           \r\n     `http://localhost:port/dyups_admin/?action=get_serves`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n\r\n\r\n   * 6.查看upstream中后端peer的servers信息           \r\n     `http://localhost:port/dyups_admin/?action=get_primary_peers`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n\r\n\r\n   * 7.查看指定机器nginx的upetreams信息           \r\n     `http://localhost:port/dyups_admin/?action=get_upstreams`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n\r\n\r\n   * 8.查看upstream中后备servers信息          \r\n     `http://localhost:port/dyups_admin/?action=get_backup_peers`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     \r\n   * 9.设置后端server的weight值          \r\n     `http://localhost:port/dyups_admin/?action=set_peer_weight&upstream=bar&backup=false&id=0&value=3`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 操作当前nginx那个upstream     \r\n     * backup: 表示当前操作的server是否是backup,取值true[是backup] or false[不是backup]\r\n     * id: 代表所要操作饿server在当前upstream列表中的位置,即下标.\r\n     * value: 代表要为指定server设定的新的权值weight\r\n     \r\n   * 10.设置后端server状态为down or up          \r\n     `http://localhost:port/dyups_admin/?action=set_peer_down&upstream=bar&backup=false&id=0&value=true`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 操作当前nginx那个upstream     \r\n     * backup: 表示当前操作的server是否是backup,取值true[是backup] or false[不是backup]\r\n     * id: 代表所要操作饿server在当前upstream列表中的位置,即下标.\r\n     * value: 代表要为指定server设定新的状态,取值true[设置为down] or false[设置为up]\r\n\r\n   * 11.增加一个upstream为指定nginx           \r\n     `http://localhost:port/dyups_admin/?action=add_upstream&upstream=new_bar&servers=server 127.0.0.1:81;server 127.0.0.1:82;`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 为当前nginx那个upstream的名称\r\n     * servers: 指定新的upstream中的server信息   \r\n     `注意:`最少要有一个server,若新增加的upstream的名字是nginx中已经有的upstream,则会覆盖调旧的upstream信息.    \r\n     `注意:`其中servers字段不同的server之间要使用分号\";\"隔开.            \r\n\r\n   * 12.删除一个upstream给指定nginx            \r\n     `http://localhost:port/dyups_admin/?action=remove_upstream&upstream=new_bar`        \r\n     其中参数说明:    \r\n     * action: 代表要执行的操作\r\n     * upstream: 想要删除的那个upstream的名称  \r\n\r\n[目录](#目录)\r\n\r\n响应字段含义\r\n====\r\n上述使用方法都是使用的rest http的方式,其http响应结果是json字符串形如:     \r\n\r\n### 修改操作:       \r\n`curl \"127.0.0.1:8045/admin/?action=add_server&upstream=bar&ip=127.0.0.1&port=82\" `\r\n```json\r\n{\r\n    \"code\": 200,\r\n    \"data\": \"add_server success\"\r\n}\r\n```   \r\n\r\n### 查询操作:          \r\n`curl   \"http://localhost:port/dyups_admin/?action=get_serves\"`   \r\n\r\n```json  \r\n{\r\n    \"code\": 200,\r\n    \"data\": {\r\n        \"bar\": [\r\n            {\r\n                \"addr\": \"127.0.0.1:80\",\r\n                \"fail_timeout\": 10,\r\n                \"max_fails\": 1,\r\n                \"weight\": 1\r\n            },\r\n            {\r\n                \"addr\": \"127.0.0.1:81\",\r\n                \"fail_timeout\": 10,\r\n                \"max_fails\": 1,\r\n                \"weight\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n```  \r\n\r\n其中json的结构总共分为2个字段:    \r\n\r\n*  1.code字段含义:        \r\n     code表示其该次操作的请求响应码[200表示执行成功,500表示操作失败].     \r\n*  2.data字段含义:         \r\n     data表示其数据部分[若该操作是修改操作,则数据字段表示操作的结果的信息.若是查询操作:则data字段是查询返回的数据].    \r\n\r\n[目录](#目录)\r\n\r\n\r\n\r\n使用注意\r\n====\r\n### 一.其中`add_server`和`add_peer`两个操作的解析:   \r\n\r\n* add_server:   \r\n  * 该操作是向指定upstream中的servers列表中增加一个server.       \r\n* add_peer: \r\n  * 该操作是向指定upstream中的后端peers列表中增加一个peer(真正的后端机器)在进行增加peer的时候会进行查询这个peer是否在upstream中的servers列表中,若不在是不允许添加的\r\n所以在执行`add_peer`之前一定要执行`add_server`操作.        \r\n\r\n[目录](#目录)\r\n\r\n\r\n\r\nCommunite  \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/fakangwang)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n","google":"nginx dynamic mange upstream","note":"Don't delete this file! It's used internally to help with page regeneration."}